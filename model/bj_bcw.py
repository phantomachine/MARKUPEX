import numpy as np
import scipy as sp
from textwrap import dedent
from scipy.optimize import brentq, fsolve
import matplotlib.pyplot as plt
from mpl_toolkits import mplot3d
import sys
import time
import collections as collections
from cycler import cycler
import setops as setops # Custom module by TK, from CSM

from scipy.interpolate import InterpolatedUnivariateSpline as spline
from scipy.interpolate import pchip, Akima1DInterpolator
import scipy.interpolate as interp
#from IPython.display import display, Math
from scipy.spatial import ConvexHull

#from mpi4py import MPI

class baseline_mod(object):
    """Model primitives and methods"""
    def __init__(self, 
                 Œ≤ = 0.9804, œÉ_CM = 1.0, œÉ_DM = 0.4225,  
                 Abar = 1.0, Ubar_CM = 1.0, Ubar_DM = 1.0, 
                 c = 1.0, œÑ_b = 0.0, œÑ_max = 0.1, œÑgrid_size = 50, 
                 z_min = 1e-2, z_max = 1.0, zgrid_size = 120, 
                 N_reimann = 1000, Tol=1e-12,œÑ_min=0.0,
                 Œ±_1=0.3, n=0.8, chi = 0.053, i_r = 0.0
                ):
        #Model parameters
        #-------------------------------             # Default parameter settings:
        self.Œ≤ = Œ≤                                   # Discount factor
        
        """Preferences"""
        self.n    =   n                              # Measure of active byuer 
        self.œÉ_CM = œÉ_CM                             # CRRA CM (market 2)   
        self.œÉ_DM = œÉ_DM                             # CRRA DM (market 1)
        self.Abar = Abar                             # Labor disutility scale -Abar*h  
        self.Ubar_CM = Ubar_CM                       # DM utility scale Ubar_DM*u(q)
        self.Ubar_DM = Ubar_DM                       # CM utility scale Ubar_CM*u(x)

        """Matching"""
        self.Œ±_1 = Œ±_1                               # Prob. of 1 firm contact 
        self.Œ±_2 = 1-self.Œ±_1                        # Prob. of 2 firm contacts: residual
        
        x_star = self.invU_C_CM(Abar)                # Optimal CM consumption: from FoC 
        self.x_star = x_star                         # in CM: quasilinear preference         
        
        """Production"""
        self.c = c                                   # Real marginal cost of production
                
        """Transfer/tax/inflation rate"""
        self.œÑ_b = œÑ_b                               # Transfer/tax to active DM buyers       
        self.œÑ_min = œÑ_min                           # Lower bound on inflation rate experiment
        self.œÑ_max = œÑ_max                           # Upper bound on inflation rate experiment
        
        #Approximation - state space settings
        self.z_min = z_min                           # Loewr bound on z
        self.z_max = z_max                           # Upper bound on z
                
        self.zgrid_size = zgrid_size                 # Grid size on array of z
        self.œÑgrid_size = œÑgrid_size                 # Grid size on array of œÑ
        
        #Array of grids on z
        self.z_grid = np.linspace(z_min, z_max, zgrid_size)      
        
        #Array of grids on œÑ
        self.œÑ_grid = np.linspace(œÑ_min, œÑ_max, œÑgrid_size) 
        
        # Reimann integral domain partition
        self.N_reimann = N_reimann
        
        
        #############################  New  ###################################
        
        self.chi = chi                              # reserve requirement ratio
        self.i_r = i_r                              # reserve rate
        
        self.Tol = Tol
    
        ####################################################################### 
    
    def z_cutoffs(self, i):
        """Define the four cutoff levels for z as in Lemmata 1-3:
            0 < z_tilde_i < zhat < z_prime < ‚àû."""
        i_d = self.i_d(i)
        z_hat_id = (self.c/(1-self.œÉ_DM)*(1+i_d))**((self.œÉ_DM-1)/self.œÉ_DM)
        z_prime = z_hat_id*(1/(1-self.œÉ_DM))**(-(self.œÉ_DM-1)/self.œÉ_DM)
        z_tilde = z_hat_id*(1+i)**(-1/self.œÉ_DM)
        # z_breve = (1-self.c) + z_hat*self.œÉ_DM
        # z_breve =((1+self.œÉ_DM*z_tilde)/self.c)**(1-self.œÉ_DM)
    
        # Sanity check!
        # zcut = np.diff([z_tilde, z_hat])
        if z_tilde <= z_hat_id:
            #print("ü•≥ Congrats: Your cutoffs are in order!")
            z_cutoffs_str = '\\tilde{z}_{i} < \\hat{z} < z^{\\prime}'
#            display(
#                Math(z_cutoffs_str)
#                )
            z_cutoffs = [z_tilde, z_hat_id, z_prime] 
            #print(['%.3f' % x for x in z_cutoffs])
#        else:
#            print("üí© You have a problem with your cutoff ordering!")
            
        return z_tilde, z_hat_id, z_prime 
    
    ## Interpolation tool ------------------------------------------------##
    def InterpFun1d(self, xdata, ydata, InterpMethod='slinear'):
        """ Interpolate 1D functions given data points (xdata, ydata). 
        Returns instance of class: funfit. NOTE: funfit.derivative() will 
        provide the derivative functions of particular smooth 
        approximant---depends on class of interpolating function. 
        See SCIPY.INTERPOLATE subclasses for more detail.   """

        # xdata = np.sort(xdata)
        if InterpMethod == 'slinear':
            funfit = spline(xdata, ydata, k=1)  # B-spline 1st order
        elif InterpMethod == 'squadratic':
            funfit = spline(xdata, ydata,  k=2)  # instantiate B-spline interp
        elif InterpMethod == 'scubic':
            funfit = spline(xdata, ydata, k=3)  # instantiate B-spline interp
        elif InterpMethod == 'squartic':
            funfit = spline(xdata, ydata, k=4)  # instantiate B-spline interp
        elif InterpMethod == 'squintic':
            funfit = spline(xdata, ydata,  k=5)  # instantiate B-spline interp
        elif InterpMethod == 'pchip':
            # Shape preserving Piecewise Cubic Hermite Interp Polynomial splines
            funfit = pchip(xdata, ydata)
        elif InterpMethod == 'akima':
            funfit = Akima1DInterpolator(xdata, ydata)
        return funfit  # instance at m point(s)
    
    def R(self, p_grid, Rex, DropFakes=True):
        """Find convex hull of graph(Rex) to get R - See Appendix B.3
        NOW RETURNS: R_grid, R_fit, lottery_supports, lottery_payoffs
        """
        Rex_graph = np.column_stack((p_grid, Rex))
    
        # Step 0:   Find Convex hull of { œÅ, Rex(œÅ) }
        mpoint = np.array([p_grid.max(), Rex.min()])  # SE corner
        graph = np.vstack((Rex_graph, mpoint))
        chull = ConvexHull(graph)
        extreme_pts = graph[chull.vertices, :]
    
        # Step 1: Intersection between original function Rex and ext. pts.
        v_intersect_graph, ind = setops.intersect(Rex_graph, extreme_pts)[0:2]
    
        # Step 2: First difference the index locations
        idiff = np.diff(ind, n=1, axis=0)
    
        # Step 3: if idiff contains elements > 1 then we know exist one/more line 
        # segment (i.e., more than one set of lotteries played). Location where 
        # straddles more than 1 step
        idz = np.where(idiff > 1)[0]
   
        # Step 4: Given the jumps, we have the end points defining each lottery!
        idz = np.column_stack((idz, idz+1))
    
        # Step 5: Store lottery supports
        lottery_supports = v_intersect_graph[idz, 0] if len(idz) > 0 else np.array([]).reshape(0, 2)
        lottery_payoffs = v_intersect_graph[idz, 1] if len(idz) > 0 else np.array([]).reshape(0, 2)
    
        # Step 6: Interpolate to approximate R
        R_fit = self.InterpFun1d(v_intersect_graph[:, 0],
                            v_intersect_graph[:, 1])
    
        # Step 7: Eliminate Fake Lotteries (below-tolerance numerical imprecisions)
        if DropFakes and lottery_supports.size > 0:
            selector = []
            for idx_lot in range(lottery_supports.shape[0]):
                # Lottery prizes for at current lottery segment, idx_lot
                p_lo, p_hi = lottery_supports[idx_lot, :]
                # Conditions: points between current lottery segment
                find_condition = (p_grid > p_lo) & (p_grid < p_hi)
                # Value of Vtilde between current lottery segment
                Rex_p_temp = Rex[find_condition]
                # Value of V between current lottery segment
                R_p_temp = R_fit(p_grid[find_condition])
                # Check: Is R "significantly different" from Rex at lottery segment?
                gap = np.absolute(R_p_temp - Rex_p_temp).max()
                if gap > 1e-10:
                    selector.append(idx_lot)  # Keep, if "YES"
            # Update definition of the set of lotteries
            if len(selector) > 0:
                lottery_supports = lottery_supports[selector, :]
                lottery_payoffs = lottery_payoffs[selector, :]
            else:
                lottery_supports = np.array([]).reshape(0, 2)
                lottery_payoffs = np.array([]).reshape(0, 2)
        
        # Step 8: Store R as evaluated on finite set p_grid
        R_grid = R_fit(p_grid)
        return R_grid, R_fit, lottery_supports, lottery_payoffs
    
    def get_lottery_probabilities(self, œÅ, lottery_supports, lottery_payoffs, R_fit):
        """Calculate œÄ1,œÅ and œÄ2,œÅ for a specific price œÅ
        Solves the system:
        œÄ1*R(œÅ1) + œÄ2*R(œÅ2) = R(œÅ)
        œÄ1*œÅ1 + œÄ2*œÅ2 = œÅ
        where œÄ2 = 1 - œÄ1
        """
        œÄ1, œÄ2 = 1.0, 0.0  # Default: no lottery
        
        if lottery_supports.size == 0:
            return œÄ1, œÄ2
            
        # Check if œÅ is in any lottery segment
        for i in range(lottery_supports.shape[0]):
            œÅ1, œÅ2 = lottery_supports[i, :]
            if œÅ1 <= œÅ <= œÅ2:
                R1, R2 = lottery_payoffs[i, :]
                R_œÅ = R_fit(œÅ)
                
                # Set up system: A * [œÄ1, œÄ2]' = b
                A = np.array([[R1, R2], [œÅ1, œÅ2]])
                b = np.array([R_œÅ, œÅ])
                
                try:
                    œÄ1, œÄ2 = np.linalg.solve(A, b)
                    break
                except np.linalg.LinAlgError:
                    # Singular matrix, keep default values
                    continue
                    
        return œÄ1, œÄ2
    
    def omega_weighting_function(self, œÅ_grid, lottery_supports, lottery_payoffs, R_fit):
        """Weighting function œâ(œÅ‚Ñì,œÅ, z, s) from equation (0.1)
        For each œÅ, returns [œâ1, œâ2] where:
        œâi = 1{|œÄ1,œÅ - œÄ2,œÅ| > 0} √ó œÄi,œÅ + 1{|œÄ1,œÅ - œÄ2,œÅ| = 0}
        """
        omega1 = np.ones_like(œÅ_grid)
        omega2 = np.ones_like(œÅ_grid)
        
        for j, œÅ in enumerate(œÅ_grid):
            œÄ1, œÄ2 = self.get_lottery_probabilities(œÅ, lottery_supports, lottery_payoffs, R_fit)
            
            if np.abs(œÄ1) != 1.0:  # There is a meaningful lottery
                omega1[j] = œÄ1  # Weight for œÅ1 price
                omega2[j] = œÄ2  # Weight for œÅ2 price  
            else:
                omega1[j] = 1.0  # No lottery case
                omega2[j] = 0.0  # No lottery case 
                
        return omega1, omega2
        
    ##-----------Model Primitive Functions--------------------------------## 
    ##-----------CM preference-------------------##         
    def U_CM(self, x):
        """CM per-period utility"""
        if self.œÉ_CM == 1.0:
            u = np.log(x)
        else:
            u = ( x**( 1.0 - self.œÉ_CM ) ) / ( 1.0 - self.œÉ_CM )
        return self.Ubar_CM*u
    
    def mu_CM(self, x):
        """CM per-period marginal utility"""
        if self.œÉ_CM == 1.0:
            MU = self.Ubar_CM / x
        else: 
            MU = x**( -self.œÉ_CM )
        return self.Ubar_CM*MU
    
    def invU_C_CM(self, marginal_value):
        """Inverse of dU/dx function, Uprime of CM good"""
        return ( marginal_value/self.Ubar_CM )**( -1.0 / self.œÉ_CM )  
    
    def h(self, labor):
        """Linear CM labor supply function"""
        return self.Abar*labor
    
    def production_CM(self, labor):
        """Linear CM production function"""
        Y = labor
        return Y
    
    ##-----------DM preference------------------##  
    def u_DM(self, q):
        """DM per-period utility"""
        if self.œÉ_DM == 1.0:
            u = np.log(q)
        else:
            u = ( q**( 1.0 - self.œÉ_DM ) ) / ( 1.0 - self.œÉ_DM )
        return self.Ubar_DM*u
    
    def mu_DM(self, q):
        """DM marginal utility"""
        if self.œÉ_DM == 1.0:
            mu = 1.0 / q
        else:
            mu = q**( -self.œÉ_DM )
        return self.Ubar_DM*mu    
    
    def invu_q_DM(self, marginal_value):
        """Inverse of du/dq function, Uprime of DM good"""
        return ( ( marginal_value/self.Ubar_DM )**( -1.0 / self.œÉ_DM ) )
    
    def cost_DM(self, q):
        """DM production technology - linear cost of producing a unit of q"""
        cost = q
        return cost
    
    def invcost_DM(self, ):
        """Inverse of DM production function - output in DM q 
        associated with given level of cost"""
        q = self.c
        return q        
    ##-------------------Gross inflation and CM transfer-------------##
    def GrossInflation(self, œÑ):
        """Gross inflation"""
        Œ≥ = 1.0 + œÑ
        return Œ≥
    
    def œÑ_CM(self, œÑ):
        """Tax/transfer to CM households"""
        œÑ1 = (self.Œ±_1+self.Œ±_2)*self.œÑb 
        œÑ2 = œÑ - œÑ1
        return œÑ2    
        
    def i_d(self, i):
        """
        deposit rate
        """
        i_d = i*(1-self.chi)+self.i_r*self.chi 
        return i_d
    
    def i_policy(self, œÑ):
        """
        Nominal policy interest rate in steady state
        """
        Œ≥ = self.GrossInflation(œÑ)
        policy_rate = Œ≥ / self.Œ≤ - 1.0
        return policy_rate    

############################# New function ####################################
    def œÅ_hat_func(self, z):
        """price that max profits with constrained buyer"""
        œÅ_hat_value = z**( self.œÉ_DM / ( self.œÉ_DM - 1.0 ) ) 
        return œÅ_hat_value
    
    def œÅ_hat_id_func(self, z, i):
        """cut-off price where constrained buyer neither borrow nor save """
        i_d = self.i_d(i)
        œÅ_hat_value = self.œÅ_hat_func(z) * ( (1.0 + i_d)**(1.0/(self.œÉ_DM-1.0)) ) 
        return œÅ_hat_value

    def œÅ_tilde_func(self, z, i):
        """cut-off price where constrained buyer will borrow"""
        œÅ_tilde_value = self.œÅ_hat_func(z) * ( (1.0 + i)**(1.0/(self.œÉ_DM-1.0)) ) 
        return œÅ_tilde_value
       
    def q_demand_func(self, œÅ, i, z):
        """DM goods demand function"""
        if self.i_r < i:
            """Reserve requirement binds"""
            i_d = self.i_d(i)

            œÅ_hat_id = self.œÅ_hat_id_func(z,i_d)

            œÅ_tilde = self.œÅ_tilde_func(z, i)

            if œÅ <= œÅ_tilde:
                """liquidity constrained and borrowing unconstrained buyer"""
                q = ( œÅ*(1.0 + i ) )**(-1.0/self.œÉ_DM)

            elif œÅ_tilde < œÅ <= œÅ_hat_id:
                """liquidity constrained and neither borrow nor save"""
                q = z / œÅ

            else:
                """liquidity unconstrained and save"""
                q = ( œÅ*(1.0 + i_d ) )**(-1.0/self.œÉ_DM)
        else:
            """
            Reserve requirement slacks, only one type of buyers
            In this case, z has to be re-solved later (and thus the pricing cut-offs) using i=i_r and i_d = i
            """
            q = ( œÅ*(1.0 + i ) )**(-1.0/self.œÉ_DM)
            
        return q

    def Œæ_demand_func(self, œÅ, i, z):
        """DM loans demand function"""
        if self.i_r < i:
            """Reserve requirement binds"""
            œÅ_hat_id = self.œÅ_hat_id_func(z, i)

            œÅ_tilde = self.œÅ_tilde_func(z, i)

            if œÅ <= œÅ_tilde:
                """liquidity constrained and borrowing unconstrained buyer"""
                loan = œÅ * ( ( œÅ*(1.0 + i ) )**(-1.0/self.œÉ_DM) ) - z

            elif œÅ_tilde < œÅ <= œÅ_hat_id:
                """liquidity constrained and neither borrow nor save"""
                loan = 0.0

            else:
                """liquidity unconstrained and save"""
                loan = 0.0
        else:
            """
            Reserve requirement slacks, only one type of buyers
            In this case, z has to be re-solved later (and thus the pricing cut-offs) using i=i_r and i_d = i
            """
            loan = œÅ * ( ( œÅ*(1.0 + i ) )**(-1.0/self.œÉ_DM) ) - z
 
        return loan
        
    def Œ¥_demand_func(self, œÅ, i, z):
        """DM deposits supply function coming from the active buyers"""
        if self.i_r < i:
            """Reserve requirement binds"""
            i_d = self.i_d(i)

            œÅ_hat_id = self.œÅ_hat_id_func(z,i)

            œÅ_tilde = self.œÅ_tilde_func(z, i)

            if œÅ <= œÅ_tilde:
                """liquidity constrained and zero deposit buyer"""
                deposit = 0.0

            elif œÅ_tilde < œÅ <= œÅ_hat_id:
                """liquidity constrained and zero deposit buyer"""
                deposit = 0.0

            else:
                """liquidity unconstrained and deposit buyer"""
                deposit = z - œÅ*( œÅ*(1.0 + i_d ) )**(-1.0/self.œÉ_DM)
        else:
            """Reserve requirement slacks
            There is only one type of buyers, no active buyers deposit
            """
            deposit = 0.0
        return deposit
            
    def Total_loan_func(self, i, z, œÑ):  
        if œÑ > self.Œ≤-1.0:
            if self.i_r < i:
                """Reserve requirement binds"""
                œÅ_grid = self.support_grid_func(z, i, œÑ)
                pdf_grid = self.dF_normalization_func(z, i, œÑ)
                em_func = self.Œ±_1 + 2.0*self.Œ±_2*( 1.0 - self.F_func(i, z, œÑ) )
                em = em_func
                
                # Get lottery information
                œÅ_range = self.support_grid_func(z, i, œÑ)
                Rex = self.R_ex(œÅ_range, i, z)
                R_grid, R_fit, lottery_supports, lottery_payoffs = self.R(œÅ_range, Rex)
                
                # Calculate expected loans with lottery weighting
                loan_expost_weighted = np.zeros_like(œÅ_grid)
                
                for j, œÅ in enumerate(œÅ_grid):
                    œÄ1, œÄ2 = self.get_lottery_probabilities(œÅ, lottery_supports, lottery_payoffs, R_fit)
                    
                    if np.abs(œÄ1) != 1.0:  # Lottery case
                        # Find lottery segment prices
                        œÅ1, œÅ2 = œÅ, œÅ  # Default
                        for k in range(lottery_supports.shape[0]):
                            if lottery_supports[k, 0] <= œÅ <= lottery_supports[k, 1]:
                                œÅ1, œÅ2 = lottery_supports[k, :]
                                break
                        print(œÄ1)
                        print(œÄ2)
                        # Expected loans: œÄ1√óŒæ(œÅ1) + œÄ2√óŒæ(œÅ2)
                        loan1 = self.Œæ_demand_func(œÅ1, i, z)
                        loan2 = self.Œæ_demand_func(œÅ2, i, z)
                        loan_expost_weighted[j] = œÄ1 * loan1 + œÄ2 * loan2
                    else:  # No lottery case
                        loan_expost_weighted[j] = self.Œæ_demand_func(œÅ, i, z)
                
                integrand_values = em * loan_expost_weighted * pdf_grid        
                total_loan = self.n * np.trapz(integrand_values, œÅ_grid)  
            else:
                """
                Reserve requirement slakcs
                In this case, z has to be re-solved later (and thus the pricing cut-offs) using i=i_r and i_d = i
                """
                œÅ_grid = self.support_grid_func(z, i, œÑ)
                
                pdf_grid = self.dF_normalization_func(z, i, œÑ)

                em =self.Œ±_1 + 2.0*self.Œ±_2*( 1.0 - self.F_func(i, z, œÑ) )

                loan_expost = np.array( [self.Œæ_demand_func(œÅ, i, z) for œÅ in œÅ_grid] )

                integrand_values = em * loan_expost * pdf_grid        
                
                total_loan = self.n*np.trapz(integrand_values, œÅ_grid)  
        else:
            total_loan = 0.0

        return total_loan
    
    def Total_deposit_func(self, i, z, œÑ):  
        if œÑ > self.Œ≤-1.0:
            if self.i_r <= i:
                """Reserve requirement binds"""
                i_d = self.i_d(i)
                
                œÅ_grid = self.support_grid_func(z, i, œÑ)
                pdf_grid = self.dF_normalization_func(z, i, œÑ)
                em_func = self.Œ±_1 + 2.0*self.Œ±_2*( 1.0 - self.F_func(i, z, œÑ) )
                em = em_func
                
                # Get lottery information
                œÅ_range = self.support_grid_func(z, i, œÑ)
                Rex = self.R_ex(œÅ_range, i, z)
                R_grid, R_fit, lottery_supports, lottery_payoffs = self.R(œÅ_range, Rex)
                
                # Calculate expected deposits with lottery weighting
                deposit_expost_weighted = np.zeros_like(œÅ_grid)
                
                for j, œÅ in enumerate(œÅ_grid):
                    œÄ1, œÄ2 = self.get_lottery_probabilities(œÅ, lottery_supports, lottery_payoffs, R_fit)
                    
                    if np.abs(œÄ1) != 1.0:  # Lottery case
                        # Find lottery segment prices
                        œÅ1, œÅ2 = œÅ, œÅ  # Default
                        for k in range(lottery_supports.shape[0]):
                            if lottery_supports[k, 0] <= œÅ <= lottery_supports[k, 1]:
                                œÅ1, œÅ2 = lottery_supports[k, :]
                                break
                        
                        # Expected deposits: œÄ1√óŒ¥(œÅ1) + œÄ2√óŒ¥(œÅ2)
                        deposit1 = self.Œ¥_demand_func(œÅ1, i, z)
                        deposit2 = self.Œ¥_demand_func(œÅ2, i, z)
                        deposit_expost_weighted[j] = œÄ1 * deposit1 + œÄ2 * deposit2
                    else:  # No lottery case
                        deposit_expost_weighted[j] = self.Œ¥_demand_func(œÅ, i, z)
                
                integrand_values = em * deposit_expost_weighted * pdf_grid        
                # Total deposits from inactive buyers and active depositors
                total_deposit = (1-self.n) * z + self.n * np.trapz(integrand_values, œÅ_grid)
            else:
                """Reserve requirement slacks"""
                total_deposit = (1-self.n) * z 
        else:
            total_deposit = 0.0
            
        return total_deposit 
    
    def i_rate_obj(self, i, z, œÑ):
        """
        Loan rate objective, which is equivalent to $\bar{i}_{r}$
        """
        
        # Total deposit
        LHS = (1-self.chi)*self.Total_deposit_func(i,z,œÑ) 
        
        # Total loan
        RHS = self.Total_loan_func(i,z,œÑ) 
        
        net = LHS - RHS
 
        return net
    
    ##-----------------DM goods expenditure and sellers' profit margin------------##
    def q_expenditure(self, œÅ, i, z):
        """expenditure := œÅq"""    
        if self.i_r < i:
            """Reserve requirement bind"""
            i_d = self.i_d(i)
            œÅ_hat_id = self.œÅ_hat_id_func(z,i)
            œÅ_tilde = self.œÅ_tilde_func(z, i)

            if œÅ <= œÅ_tilde:
                """liquidity constrained and borrowing unconstrained buyer"""
                œÅq = œÅ * ( ( œÅ*(1.0 + i ) )**(-1.0/self.œÉ_DM) )

            elif œÅ_tilde < œÅ <= œÅ_hat_id:
                """liquidity constrained and neither borrow nor save"""
                œÅq = z

            else:
                """liquidity unconstrained and save"""
                œÅq = œÅ *( œÅ*(1.0 + i_d ) )**(-1.0/self.œÉ_DM)
        else:
            """
            Reserve requirement slacks
            In this case, z has to be re-solved later (and thus the pricing cut-offs) using i=i_r and i_d = i
            """
            œÅq = œÅ * ( ( œÅ*(1.0 + i ) )**(-1.0/self.œÉ_DM) )
        return œÅq
    
    def R_ex_scalar(self, œÅ, i, z):
        """seller's ex-post profit per customer served"""
        if self.i_r < i:
            """Reserve requirement bind"""
            i_d = self.i_d(i)
            œÅ_hat_id = self.œÅ_hat_id_func(z,i)
            œÅ_tilde = self.œÅ_tilde_func(z, i)
            if œÅ <= œÅ_tilde:
                """profit margin from serving
                liquidity constrained and borrowing unconstrained buyer
                """
                qb = ( œÅ*(1.0 + i ) )**(-1.0/self.œÉ_DM)
                val = qb * ( œÅ - self.c ) 

            elif œÅ_tilde < œÅ <= œÅ_hat_id:
                """profit margin from serving 
                liquidity constrained and neither borrow nor save
                """
                qb = z / œÅ
                val = qb * ( œÅ - self.c )

            else:
                """liquidity unconstrained buyer and save"""
                qb =  ( œÅ*(1.0 + i_d ) )**(-1.0/self.œÉ_DM)
                val = qb * ( œÅ - self.c )
        else:
            """
            Reserve requirement slakcs
            In this case, z has to be re-solved later (and thus the pricing cut-offs) using i=i_r and i_d = i
            """
            qb = ( œÅ*(1.0 + i ) )**(-1.0/self.œÉ_DM)
            val = qb * ( œÅ - self.c ) 
        return val
    
    def R_ex(self, œÅ, i, z):
        """seller's ex-post profit per customer served.
        œÅ is a 1D array, (i,z) are scalars. This function is 
        the vectorized version of R_ex_scalar() above."""
        if self.i_r < i:
            """Reserve requirement bind"""
            
            # Pricing cutoffs
            i_d = self.i_d(i)
            œÅ_hat_id = self.œÅ_hat_id_func(z,i)
            œÅ_tilde = self.œÅ_tilde_func(z, i)

            qb = np.zeros(œÅ.shape)
            val = qb.copy()

            # liquidity constrained and borrowing unconstrained buyer
            bool = (œÅ <= œÅ_tilde)
            qb[bool] = (œÅ[bool]*(1.0 + i))**(-1.0/self.œÉ_DM)
            val[bool] = qb[bool] * (œÅ[bool] - self.c)

            # liquidity constrained and zero borrowing buyer
            bool = (œÅ_tilde < œÅ) & (œÅ <= œÅ_hat_id)
            qb[bool] = z / œÅ[bool]
            val[bool] = qb[bool] * (œÅ[bool] - self.c)

            # money unconstrained
            bool = (œÅ > œÅ_hat_id)
            qb[bool] = (œÅ[bool]*(1.0 + i_d))**(-1.0/self.œÉ_DM)
            val[bool] = qb[bool] * (œÅ[bool] - self.c)
        else:
            """
            Reserve requirement slakcs
            In this case, z has to be re-solved later (and thus the pricing cut-offs) using i=i_r and i_d = i
            """
            # Pricing cutoffs
            i_d = self.i_r
            i = self.i_r
            œÅ_hat_id = self.œÅ_hat_id_func(z,i)
            œÅ_tilde = self.œÅ_tilde_func(z, i)

            qb = np.zeros(œÅ.shape)
            val = qb.copy()
            
            œÅ_constant = self.c / (1.0 - self.œÉ_DM)
            
            # liquidity constrained and borrowing unconstrained buyer
            bool = (œÅ <=œÅ_constant)
            qb[bool] = (œÅ[bool]*(1.0 + i))**(-1.0/self.œÉ_DM)
            val[bool] = qb[bool] * (œÅ[bool] - self.c)
        return val

    def G1(self, œÅ, i, z):
        """seller's ex-post profit per customer served
        profit from serving liquidity constrained and 
        borrowing unconstrained buyer"""
        qb = ( œÅ*(1.0 + i ) )**(-1.0/self.œÉ_DM)
        val = qb * ( œÅ - self.c ) 
                    
        return val

    def G2(self, œÅ, i, z):
        """seller's ex-post profit per customer served"""
        qb = z / œÅ
        val = qb * ( œÅ - self.c )
        
        return val

    def G3(self, œÅ, i, z):
        i_d = self.i_d(i)
        qb = ( œÅ*(1.0 + i_d ) )**(-1.0/self.œÉ_DM)
        val = qb * ( œÅ - self.c )
            
        return val
    
    ##-----------------bounds on DM goods prices------------##
    def œÅ_max_func(self, z,i):
        """Equilibrium upper bound on the support of F: œÅ_{max}"""
        
        œÅ_constant = self.c / (1.0 - self.œÉ_DM)
        
        if i >0:
            """Away from the Friedman rule"""
            if self.i_r < i:
                """Reserve requirement binds"""
                i_d = self.i_d(i)
                œÅ_hat_id = self.œÅ_hat_id_func(z,i)
#                œÅ_constant = self.c / (1.0 - self.œÉ_DM)

                z_tilde, z_hat_id, z_prime =self.z_cutoffs(i)

                if z>z_hat_id:
                    œÅ_ub = œÅ_constant
                elif z>z_tilde and z<z_hat_id: 
                    œÅ_ub = œÅ_hat_id
                else:
                    œÅ_ub = œÅ_constant
            else:
                
                œÅ_ub = œÅ_constant
        elif i <0:
            œÅ_ub = œÅ_constant
        else:
            """At the Friedman rule, price degenerate at marginal cost"""
            œÅ_ub = self.c
        return œÅ_ub
    
    def œÅ_min_func(self, z, i, œÑ):
        """Equal expected profit condition to back out the lower bound
        on the support of F given R(œÅ_{max})
        """ 
        if œÑ > self.Œ≤-1.0:
            """Away from the Friedman rule"""
            i_d = self.i_d(i)
            œÅ_max = self.œÅ_max_func(z,i)

            œÅ_range= np.linspace(self.c, œÅ_max, self.N_reimann)  

            ## Temporarily, start by setting rho_max and begin with c at the minimum.

            Rex = self.R_ex(œÅ_range, i, z)

            R_grid,R_fit, lottery_supports, lottery_payoffs=self.R(œÅ_range, Rex, DropFakes=True)

            noisy_search = self.Œ±_1  / ( self.Œ±_1 + 2.0 * self.Œ±_2 ) 

            LHS = lambda œÅ: self.q_demand_func(œÅ, i, z) * ( œÅ - self.c )

            RHS = noisy_search * R_fit(œÅ_max)  

            vals_obj = lambda œÅ: RHS - LHS(œÅ)

            œÅ_lb = brentq(vals_obj, self.c, œÅ_max)
        else:
            """At the Friedman rule, price degenerate at marginal cost"""
            œÅ_lb = self.c
        return œÅ_lb
    
    ##-----------DM goods price distribution: CDF and pdf in terms of aggregate variables-------##
    def F_func(self, i, z, œÑ):
        """Posted price distribution (CDF): F(œÅ, i, z)
        Note: i := i(œÅ, z)
        """
        
        œÅ_max = self.œÅ_max_func(z,i)
        
        œÅ_range=self.support_grid_func(z, i, œÑ)
        
        Rex = self.R_ex(œÅ_range, i, z)
        
        R_grid,R_fit, lottery_supports, lottery_payoffs=self.R(œÅ_range, Rex, DropFakes=True)

        noisy_search = self.Œ±_1 / ( 2.0 * self.Œ±_2 ) 
        
        R_max = R_fit(œÅ_max)
        
        R =R_grid
        
        CDF_value =  1.0 - noisy_search * ( ( R_max / R ) - 1.0 ) 
        
        return CDF_value    
    
    def dF_func(self, i, z, œÑ):
        """Density of the price distribution (PDF): dF(œÅ, i, z)/dœÅ"""
        
        œÅ_max = self.œÅ_max_func(z,i)
        
        œÅ_range=self.support_grid_func(z, i, œÑ)
        
        noisy_search = self.Œ±_1 / ( 2.0 * self.Œ±_2 ) 
        
        Rex = self.R_ex(œÅ_range, i, z)
        
        R_grid,R_fit, lottery_supports, lottery_payoffs=self.R(œÅ_range, Rex, DropFakes=True)
    
        R_max =R_fit(œÅ_max)
        
        R =R_grid
        
        dR_dœÅ = R_fit.derivative()(œÅ_range)
        
        pdf_value = noisy_search*( ( R_max / ( R**2.0 ) ) * dR_dœÅ )
        
        return pdf_value
    
    def support_grid_func(self, z, i, œÑ):
        a = self.œÅ_min_func(z, i, œÑ)
        b = self.œÅ_max_func(z,i)       
        supports = np.linspace(a, b, self.N_reimann)
        return supports
    
    def dF_normalization_func(self, z, i, œÑ):
        œÅ_grid = self.support_grid_func(z, i, œÑ)
        dF = self.dF_func(i, z, œÑ)
        width = (œÅ_grid[-1] - œÅ_grid[0]) / (len(œÅ_grid)-1)
        dF_sum = np.sum(width * dF)
        dF_nor = dF / dF_sum
        return dF_nor 

    def money_euler_rhs(self, z, i, œÑ):
        """Fixed money Euler RHS with compound lottery weighting
        Implements equation (0.2) from the technical note
        """
        if œÑ > self.Œ≤ - 1.0:
            if self.i_r < i:
                # Get pricing information with lottery details
                œÅ_hat_id = self.œÅ_hat_id_func(z, i)
                œÅ_grid = self.support_grid_func(z, i, œÑ)
                dF_grid = self.dF_normalization_func(z, i, œÑ)
                
                # Get lottery information
                œÅ_range = self.support_grid_func(z, i, œÑ)
                Rex = self.R_ex(œÅ_range, i, z)
                R_grid, R_fit, lottery_supports, lottery_payoffs = self.R(œÅ_range, Rex)
                
                # Calculate weighting function - returns [œâ1, œâ2]
                omega1, omega2 = self.omega_weighting_function(œÅ_grid, lottery_supports, lottery_payoffs, R_fit)
                
                # Find threshold index
                œÅ_hat_index = np.argmax(œÅ_grid >= œÅ_hat_id)
                if œÅ_hat_index == 0:
                    œÅ_hat_index = -1
                
                # Extensive margin
                em_func = self.Œ±_1 + 2.0*self.Œ±_2*(1.0 - self.F_func(i, z, œÑ))
                em = em_func[:œÅ_hat_index]
                
                # Liquidity premium with compound lottery weighting
                # For each œÅ, we sum over ‚Ñì ‚àà {1,2}: ‚àëœâ(œÅ‚Ñì,œÅ) √ó [function of œÅ‚Ñì,œÅ]
                liquidity_premium_weighted = np.zeros(len(œÅ_grid[:œÅ_hat_index]))
                
                for j, œÅ in enumerate(œÅ_grid[:œÅ_hat_index]):
                    œÄ1, œÄ2 = self.get_lottery_probabilities(œÅ, lottery_supports, lottery_payoffs, R_fit)
    
                    if np.abs(œÄ1) != 1.0:  # Lottery case
                    
                        # Find the lottery segment and corresponding prices
                        œÅ1, œÅ2 = œÅ, œÅ  # Default to same price
                        for k in range(lottery_supports.shape[0]):
                            if lottery_supports[k, 0] <= œÅ <= lottery_supports[k, 1]:
                                œÅ1, œÅ2 = lottery_supports[k, :]
                                break
                        
                        # Weighted sum: œâ1√óf(œÅ1) + œâ2√óf(œÅ2)
                        lp1 = (self.mu_DM(self.q_demand_func(œÅ1, i, z)) / œÅ1) - 1.0
                        lp2 = (self.mu_DM(self.q_demand_func(œÅ2, i, z)) / œÅ2) - 1.0
                        
                        liquidity_premium_weighted[j] = œÄ1 * lp1 + œÄ2 * lp2
                    else:  # No lottery case
                        liquidity_premium_weighted[j] = (self.mu_DM(self.q_demand_func(œÅ, i, z)) / œÅ) - 1.0
                
                mu_buyer = em * liquidity_premium_weighted * dF_grid[:œÅ_hat_index]
                
                # Deposit terms
                i_d = self.i_d(i)
                mu_depositor_1 = (1-self.n) * i_d
                
                # Unconstrained buyers with compound lottery weighting
                em_deposit = em_func[œÅ_hat_index:]
                deposit_premium_weighted = np.zeros(len(œÅ_grid[œÅ_hat_index:]))
                
                for j, œÅ in enumerate(œÅ_grid[œÅ_hat_index:]):
                    œÄ1, œÄ2 = self.get_lottery_probabilities(œÅ, lottery_supports, lottery_payoffs, R_fit)
                    
                    if np.abs(œÄ1) != 1.0:  # Lottery case
                        # For deposit premium, it's just i_d regardless of price
                        deposit_premium_weighted[j] = œÄ1 * i_d + œÄ2 * i_d  # = i_d
                       
                    else:  # No lottery case
                        deposit_premium_weighted[j] = i_d

                mu_depositor_2 = em_deposit * deposit_premium_weighted * dF_grid[œÅ_hat_index:]
                
                value = mu_depositor_1 + self.n*(np.trapz(mu_buyer, œÅ_grid[:œÅ_hat_index]) + 
                                               np.trapz(mu_depositor_2, œÅ_grid[œÅ_hat_index:]))
                
            else:
                i = self.i_r
                value = i
        else:
            # At Friedman rule
            value = z**(-self.œÉ_DM) - 1.0
            
        return value
    
    def money_euler_obj(self, z, i, œÑ):
        """Fixed money Euler objective using compound lottery weighting"""
        LHS = self.i_policy(œÑ)
        RHS = self.money_euler_rhs(z, i, œÑ)
        net = LHS - RHS
        return net
    
    def system_func(self, initial_guess, œÑ):
        """Fixed system function with compound lottery implementation"""
        z = initial_guess[0]
        i = initial_guess[1]
        
        z_obj = self.money_euler_obj(z, i, œÑ)
        i_obj = self.i_rate_obj(i, z, œÑ)  # This can remain unchanged
        
        return [z_obj, i_obj]
    
    def solve_z_i(self, z_guess, i_guess, œÑ):
        """Solve for equilibrium with compound lottery fixes"""
        if œÑ > self.Œ≤ - 1.0:
            x0 = [z_guess, i_guess]
            x = fsolve(self.system_func, x0, xtol=1e-5, args=(œÑ,), full_output=False)
            
            z = x[0]
            i = x[1]
            
            if self.i_r < i:
                i = i
            else:
                i = self.i_r
                z = None  # Need to resolve this case
        else:
            z = 1
            i = 0.0
            
        return z, i                      

    ##------------------SME and Stat---------------------------------##
    def Total_q_func(self, z, i, œÑ):
        """Total quantity with lottery probability weighting"""
        if œÑ > self.Œ≤-1.0:
            """Away from the Friedman rule"""
            œÅ_grid = self.support_grid_func(z, i, œÑ)
            pdf_grid = self.dF_normalization_func(z, i, œÑ)
            em_func = self.Œ±_1 + 2.0*self.Œ±_2*( 1.0 - self.F_func(i, z, œÑ) )
            em = em_func
            
            # Get lottery information
            œÅ_range = self.support_grid_func(z, i, œÑ)
            Rex = self.R_ex(œÅ_range, i, z)
            R_grid, R_fit, lottery_supports, lottery_payoffs = self.R(œÅ_range, Rex)
            
            # Calculate expected quantity with lottery weighting
            q_expost_weighted = np.zeros_like(œÅ_grid)
            
            for j, œÅ in enumerate(œÅ_grid):
                œÄ1, œÄ2 = self.get_lottery_probabilities(œÅ, lottery_supports, lottery_payoffs, R_fit)
                
                if np.abs(œÄ1) != 1.0:  # Lottery case
                    # Find lottery segment prices
                    œÅ1, œÅ2 = œÅ, œÅ  # Default
                    for k in range(lottery_supports.shape[0]):
                        if lottery_supports[k, 0] <= œÅ <= lottery_supports[k, 1]:
                            œÅ1, œÅ2 = lottery_supports[k, :]
                            break
                    
                    # Expected quantity: œÄ1√óq(œÅ1) + œÄ2√óq(œÅ2)
                    q1 = self.q_demand_func(œÅ1, i, z)
                    q2 = self.q_demand_func(œÅ2, i, z)
                    q_expost_weighted[j] = œÄ1 * q1 + œÄ2 * q2
                else:  # No lottery case
                    q_expost_weighted[j] = self.q_demand_func(œÅ, i, z)
            
            integrand_values = em * q_expost_weighted * pdf_grid
            total_q = self.n * np.trapz(integrand_values, œÅ_grid)
        else:
            """At the Friedman rule"""
            q_FR = z/self.c
            total_q = self.n * q_FR
            
        return total_q
    
    def Total_œÅq_func(self, z, i, œÑ):
        if œÑ > self.Œ≤ - 1.0:
            """Away from the Friedman rule"""
            œÅ_grid = self.support_grid_func(z, i, œÑ)
            pdf_grid = self.dF_normalization_func(z, i, œÑ)
            em_func = self.Œ±_1 + 2.0*self.Œ±_2*( 1.0 - self.F_func(i, z, œÑ) )
            em = em_func
            
            # Get lottery information
            œÅ_range = self.support_grid_func(z, i, œÑ)
            Rex = self.R_ex(œÅ_range, i, z)
            R_grid, R_fit, lottery_supports, lottery_payoffs = self.R(œÅ_range, Rex)
            
            # Calculate expected expenditure with lottery weighting
            œÅq_expost_weighted = np.zeros_like(œÅ_grid)
            
            for j, œÅ in enumerate(œÅ_grid):
                œÄ1, œÄ2 = self.get_lottery_probabilities(œÅ, lottery_supports, lottery_payoffs, R_fit)
                
                if np.abs(œÄ1) != 1.0:  # Lottery case
                    # Find lottery segment prices
                    œÅ1, œÅ2 = œÅ, œÅ  # Default
                    for k in range(lottery_supports.shape[0]):
                        if lottery_supports[k, 0] <= œÅ <= lottery_supports[k, 1]:
                            œÅ1, œÅ2 = lottery_supports[k, :]
                            break
                    
                    # Expected expenditure: œÄ1√ó(œÅ1√óq1) + œÄ2√ó(œÅ2√óq2)
                    exp1 = self.q_expenditure(œÅ1, i, z)
                    exp2 = self.q_expenditure(œÅ2, i, z)
                    œÅq_expost_weighted[j] = œÄ1 * exp1 + œÄ2 * exp2
                else:  # No lottery case
                    œÅq_expost_weighted[j] = self.q_expenditure(œÅ, i, z)
            
            integrand_values = em * œÅq_expost_weighted * pdf_grid
            total_œÅq = self.n * np.trapz(integrand_values, œÅ_grid)
        else:
            """At the Friedman rule"""
            # œÅ = c
            q_FR = z/self.c
            
            total_œÅq = self.n*(self.c*q_FR)
        return total_œÅq    
    
    def firm_profit_func(self, z, i, œÑ):
        if œÑ>self.Œ≤-1.0:
            """Away from the Friedman rule"""
            œÅ_grid = self.support_grid_func(z, i, œÑ)

            pdf_grid = self.dF_normalization_func(z, i, œÑ)

            em_func =self.Œ±_1 + 2.0*self.Œ±_2*( 1.0 - self.F_func(i, z, œÑ) )

            em = em_func

            œÅ_range=self.support_grid_func(z, i, œÑ)

            Rex = self.R_ex(œÅ_range, i, z)

            R_grid,R_fit, lottery_supports, lottery_payoffs=self.R(œÅ_range, Rex, DropFakes=True)

            profit_margin = np.array([R_fit(œÅ) for œÅ in œÅ_grid])

            integrand_values = em * profit_margin * pdf_grid

            firm_profit = np.trapz(integrand_values, œÅ_grid)      
        else:
            """At the Friedman rule"""
            firm_profit = 0.0
        return firm_profit
    
    def markup_func(self, z, i, œÑ):
        """Markup calculation with lottery probability weighting"""
        if œÑ > self.Œ≤-1.0:
            """Away from the Friedman rule"""
            œÅ_grid = self.support_grid_func(z, i, œÑ)
            pdf_grid = self.dF_normalization_func(z, i, œÑ)
            
            # Get lottery information
            œÅ_range = self.support_grid_func(z, i, œÑ)
            Rex = self.R_ex(œÅ_range, i, z)
            R_grid, R_fit, lottery_supports, lottery_payoffs = self.R(œÅ_range, Rex)
            
            # Calculate expected markup with lottery weighting
            markup_expost_weighted = np.zeros_like(œÅ_grid)
            
            for j, œÅ in enumerate(œÅ_grid):
                œÄ1, œÄ2 = self.get_lottery_probabilities(œÅ, lottery_supports, lottery_payoffs, R_fit)
                
                if np.abs(œÄ1) != 1.0:  # Lottery case
                    # Find lottery segment prices
                    œÅ1, œÅ2 = œÅ, œÅ  # Default
                    for k in range(lottery_supports.shape[0]):
                        if lottery_supports[k, 0] <= œÅ <= lottery_supports[k, 1]:
                            œÅ1, œÅ2 = lottery_supports[k, :]
                            break
                    
                    # Expected markup: œÄ1√ó(œÅ1/c) + œÄ2√ó(œÅ2/c)
                    markup1 = œÅ1 / self.c
                    markup2 = œÅ2 / self.c
                    markup_expost_weighted[j] = œÄ1 * markup1 + œÄ2 * markup2
                else:  # No lottery case
                    markup_expost_weighted[j] = œÅ / self.c
            
            q_share = self.n * self.Total_q_func(z, i, œÑ) / (self.Total_q_func(z, i, œÑ) + self.x_star)
            x_share = self.n * self.x_star / (self.Total_q_func(z, i, œÑ) + self.x_star)
            nor_share = q_share / x_share
            
            markup = np.trapz(nor_share * (markup_expost_weighted * pdf_grid), œÅ_grid) + 1.0
        else:
            """At the Friedman rule"""
            # CM (gross) price markup is one
            markup = 1.0
        return markup
    
    def DM_utility(self, z, i, œÑ):
        """
        DM utility with compound lottery weighting
        """        
        if œÑ>self.Œ≤-1.0:
            """Away from the Friedman rule"""
            œÅ_grid = self.support_grid_func(z, i, œÑ)
            pdf_grid = self.dF_normalization_func(z, i, œÑ)
            em_func =self.Œ±_1 + 2.0*self.Œ±_2*( 1.0 - self.F_func(i, z, œÑ) )
            em = em_func
            
            # Get lottery information
            œÅ_range = self.support_grid_func(z, i, œÑ)
            Rex = self.R_ex(œÅ_range, i, z)
            R_grid, R_fit, lottery_supports, lottery_payoffs = self.R(œÅ_range, Rex)
            
            # Calculate expected utility with compound lottery weighting
            expost_utility_weighted = np.zeros_like(œÅ_grid)
            
            for j, œÅ in enumerate(œÅ_grid):
                œÄ1, œÄ2 = self.get_lottery_probabilities(œÅ, lottery_supports, lottery_payoffs, R_fit)
                
                if np.abs(œÄ1) != 1.0:  # Lottery case
                    # Find the lottery segment and corresponding prices
                    œÅ1, œÅ2 = œÅ, œÅ  # Default to same price
                    for k in range(lottery_supports.shape[0]):
                        if lottery_supports[k, 0] <= œÅ <= lottery_supports[k, 1]:
                            œÅ1, œÅ2 = lottery_supports[k, :]
                            break
                    
                    # Expected utility: œÄ1√ó[u(q1) - c(q1)] + œÄ2√ó[u(q2) - c(q2)]
                    utility1 = self.u_DM(self.q_demand_func(œÅ1,i,z)) - self.cost_DM(self.q_demand_func(œÅ1,i,z))
                    utility2 = self.u_DM(self.q_demand_func(œÅ2,i,z)) - self.cost_DM(self.q_demand_func(œÅ2,i,z))
                    expost_utility_weighted[j] = œÄ1 * utility1 + œÄ2 * utility2
                else:  # No lottery case
                    expost_utility_weighted[j] = self.u_DM(self.q_demand_func(œÅ,i,z)) - self.cost_DM(self.q_demand_func(œÅ,i,z))
            
            utility = self.n*np.trapz(em * expost_utility_weighted * pdf_grid, œÅ_grid)
        else:
            qb_FR = z/self.c
            utility = self.n*(self.Œ±_1 + self.Œ±_2) * ( self.u_DM(qb_FR)- self.cost_DM(qb_FR) ) 
        return utility    
    
    def DM_utility_delta(self, z, i, œÑ, delta):
        """
        DM utility change by delta with compound lottery weighting
        """        
        if œÑ>self.Œ≤-1.0:
            """Away from the Friedman rule"""
            œÅ_grid = self.support_grid_func(z, i, œÑ)
            pdf_grid = self.dF_normalization_func(z, i, œÑ)
            em_func =self.Œ±_1 + 2.0*self.Œ±_2*( 1.0 - self.F_func(i, z, œÑ) )
            em = em_func
            
            # Get lottery information
            œÅ_range = self.support_grid_func(z, i, œÑ)
            Rex = self.R_ex(œÅ_range, i, z)
            R_grid, R_fit, lottery_supports, lottery_payoffs = self.R(œÅ_range, Rex)
            
            # Calculate expected utility with compound lottery weighting
            expost_utility_weighted = np.zeros_like(œÅ_grid)
            
            for j, œÅ in enumerate(œÅ_grid):
                œÄ1, œÄ2 = self.get_lottery_probabilities(œÅ, lottery_supports, lottery_payoffs, R_fit)
                
                if np.abs(œÄ1) != 1.0:  # Lottery case
                    # Find the lottery segment and corresponding prices
                    œÅ1, œÅ2 = œÅ, œÅ  # Default to same price
                    for k in range(lottery_supports.shape[0]):
                        if lottery_supports[k, 0] <= œÅ <= lottery_supports[k, 1]:
                            œÅ1, œÅ2 = lottery_supports[k, :]
                            break
                    
                    # Expected utility with delta: œÄ1√ó[u(q1*Œ¥) - c(q1)] + œÄ2√ó[u(q2*Œ¥) - c(q2)]
                    utility1 = self.u_DM(self.q_demand_func(œÅ1,i,z)*delta) - self.cost_DM(self.q_demand_func(œÅ1,i,z))
                    utility2 = self.u_DM(self.q_demand_func(œÅ2,i,z)*delta) - self.cost_DM(self.q_demand_func(œÅ2,i,z))
                    expost_utility_weighted[j] = œÄ1 * utility1 + œÄ2 * utility2
                else:  # No lottery case
                    expost_utility_weighted[j] = self.u_DM(self.q_demand_func(œÅ,i,z)*delta) - self.cost_DM(self.q_demand_func(œÅ,i,z))
            
            utility = self.n*np.trapz(em * expost_utility_weighted * pdf_grid, œÅ_grid)
        else:
            qb_FR = z/self.c
            utility = self.n*(self.Œ±_1 + self.Œ±_2) * ( self.u_DM(qb_FR*delta)- self.cost_DM(qb_FR) ) 

        return utility
    
    def welfare_func(self, z, i, œÑ):
        """Welfare function with compound lottery weighting"""
        discount = ( 1.0 / ( 1.0 - self.Œ≤ ) )
        if œÑ == self.Œ≤ - 1.0:
            
            #allocation under Friedman rule
            qb_FR = z/self.c

            DM_segment = self.n*(self.Œ±_1 + self.Œ±_2) * ( self.u_DM(qb_FR)- self.cost_DM(qb_FR) ) 
            
            labor_CM = self.x_star 
            
            CM_segment = self.U_CM(self.x_star) - self.h(labor_CM)
            
            lifetime_utility = discount*(DM_segment + CM_segment )
        
        else:
            
            DM_segment = self.DM_utility(z, i, œÑ) 
            
            labor_CM = self.x_star 
            
            CM_segment = (self.U_CM(self.x_star) -  self.h(labor_CM) )
            
            lifetime_utility = discount*(DM_segment + CM_segment )
            
        return lifetime_utility
    
    def welfare_func_delta(self, z, i, œÑ, delta):
        """Welfare function with delta and compound lottery weighting"""
        discount = ( 1.0 / ( 1.0 - self.Œ≤ ) )
        if œÑ == self.Œ≤ - 1.0:
            
            #allocation under Friedman rule
            qb_FR = z/self.c

            DM_segment = self.n*(self.Œ±_1 + self.Œ±_2) * ( self.u_DM(qb_FR*delta) - self.cost_DM(qb_FR) )
            
            labor_CM = self.x_star 
            
            CM_segment = self.U_CM(self.x_star*delta) - self.h(labor_CM)
            
            lifetime_utility = discount*(DM_segment + CM_segment )
        
        else:
            
            DM_segment = self.DM_utility_delta(z, i, œÑ, delta) 
            
            labor_CM = self.x_star 
            
            CM_segment = (self.U_CM(self.x_star*delta) -  self.h(labor_CM))
            
            lifetime_utility = discount*(DM_segment + CM_segment )
            
        return lifetime_utility      
    
##---Begin Special case: BCW optimal quantity derived from their Money demand equation------##
    def q_BCW(self, œÑ):
        power = ( -1.0 / self.œÉ_DM )
        i_d = self.i_policy(œÑ)
        q =  (i_d + 1.0)**(power) 
        return q
    
    def loan_gdp_bcw_func(self, œÑ):
        œÅ = 1.0
        i = self.i_policy(œÑ)
        total_q_exp = self.n*œÅ * (self.Œ±_1 + self.Œ±_2) * self.q_BCW(œÑ)
        z_bcw = total_q_exp
        loan = self.n*(self.Œ±_1 + self.Œ±_2) * self.Œæ_demand_func(œÅ, i, z_bcw)
        loan_gdp = loan / (total_q_exp + self.x_star)
        return loan_gdp    
    
    def welfare_bcw_func(self, œÑ):
        """Economy with perfectly competitive banks and competitive pricing in goods market"""
        discount = 1.0 / ( 1.0 - self.Œ≤ ) 
        
        labor_CM = self.x_star 
        
        CM_segment = self.U_CM(self.x_star) - self.h(labor_CM)
        
        DM_segment = self.n*(self.Œ±_1 + self.Œ±_2)*( self.u_DM(self.q_BCW(œÑ)) - self.cost_DM(self.q_BCW(œÑ)) )
        
        lifetime_utility = discount*(DM_segment + CM_segment )
        
        return lifetime_utility   
    
    def welfare_bcw_func_delta(self, œÑ, delta):
        """Economy with perfectly competitive banks and competitive pricing in goods market
        for calculating CEV
        """
        discount = 1.0 / ( 1.0 - self.Œ≤ ) 
        
        labor_CM = self.x_star 
        
        CM_segment = self.U_CM(self.x_star*delta) - self.h(labor_CM)
        
        DM_segment = self.n*(self.Œ±_1+self.Œ±_2)*( self.u_DM(self.q_BCW(œÑ)*delta) - self.cost_DM(self.q_BCW(œÑ)) )
        
        lifetime_utility = discount*(DM_segment + CM_segment )
        
        return lifetime_utility     
                                                 
    def SME_stat_func(self, z, i, œÑ):
        """Statistics calculation with lottery probability weighting"""
        ## calculate aggregate markup
        Y = self.x_star + self.Total_q_func(z, i, œÑ)
        DM_share = self.Total_q_func(z, i, œÑ) / Y
        CM_share = self.x_star / Y
        nor_share = DM_share / CM_share
        
        if œÑ > self.Œ≤-1.0:
            œÅ_grid = self.support_grid_func(z, i, œÑ)
            pdf_normalized_grid = self.dF_normalization_func(z, i, œÑ)
            
            # Get lottery information
            œÅ_range = self.support_grid_func(z, i, œÑ)
            Rex = self.R_ex(œÅ_range, i, z)
            R_grid, R_fit, lottery_supports, lottery_payoffs = self.R(œÅ_range, Rex)
            
            # Calculate lottery-weighted price statistics
            price_weighted = np.zeros_like(œÅ_grid)
            markup_weighted = np.zeros_like(œÅ_grid)
            
            for j, œÅ in enumerate(œÅ_grid):
                œÄ1, œÄ2 = self.get_lottery_probabilities(œÅ, lottery_supports, lottery_payoffs, R_fit)
                
                if np.abs(œÄ1) != 1.0:  # Lottery case
                    # Find lottery segment prices
                    œÅ1, œÅ2 = œÅ, œÅ  # Default
                    for k in range(lottery_supports.shape[0]):
                        if lottery_supports[k, 0] <= œÅ <= lottery_supports[k, 1]:
                            œÅ1, œÅ2 = lottery_supports[k, :]
                            break
                    
                    # Expected price and markup
                    price_weighted[j] = œÄ1 * œÅ1 + œÄ2 * œÅ2
                    markup_weighted[j] = œÄ1 * (œÅ1 / self.c) + œÄ2 * (œÅ2 / self.c)
                else:  # No lottery case
                    price_weighted[j] = œÅ
                    markup_weighted[j] = œÅ / self.c
            
            # Calculate (lottery-weighted) price dispersion
            price_mean = np.trapz(price_weighted * pdf_normalized_grid, œÅ_grid)
            y_1 = pdf_normalized_grid * ((price_weighted - price_mean)**2.0)
            price_sd = np.sqrt(np.trapz(y_1, œÅ_grid))
            price_cv = price_sd / price_mean    
            
            # Calculate (lottery-weighted) markup dispersion
            markup_mean = self.markup_func(z, i, œÑ) 
            y_2 = pdf_normalized_grid * ((markup_weighted - markup_mean)**2.0) * (nor_share**2.0) + 0.0  # CM_dispersion = 0
            markup_sd = np.sqrt(np.trapz(y_2, œÅ_grid)) 
            markup_cv = markup_sd / markup_mean
        else:
            price_mean = self.c
            price_sd = 0.0
            price_cv = 0.0
            
            markup_mean = 1.0
            markup_sd = 0.0
            markup_cv = 0.0

        mpy = z / Y
        loan_gdp = self.Total_loan_func(i, z, œÑ) / Y
        
        stat_result = {
            'price_mean': price_mean,
            'price_sd': price_sd,
            'price_cv': price_cv,
            'markup_mean': markup_mean,
            'markup_sd': markup_sd,
            'markup_cv': markup_cv,     
            'mpy': mpy,
            'loan_gdp': loan_gdp
        }
        
        return stat_result
    
    def SME_stat(self, z_guess, i_guess):    
        tic = time.time()
        
        zstar = np.zeros(self.œÑ_grid.size)
        istar = zstar.copy()
        i_dstar = zstar.copy()
        
        Œæstar = zstar.copy()
        Dstar = zstar.copy()
        qstar = zstar.copy()
        
        œÄ_firm_star = zstar.copy()
        
        DM_surplus = zstar.copy()

        price_mean = zstar.copy()
        price_sd = zstar.copy()
        price_cv = zstar.copy()
                
        markup_mean = zstar.copy()
        markup_sd = zstar.copy()
        markup_cv = zstar.copy()

        mpy_star = zstar.copy()
        
        w_star = zstar.copy()
        w_bcw = zstar.copy()
        
        FFR = zstar.copy()
        
        credit_gdp = zstar.copy()
        credit_gdp_bcw = zstar.copy()  
        
        for idx_œÑ, œÑ in enumerate(self.œÑ_grid):

            zstar[idx_œÑ], istar[idx_œÑ] = self.solve_z_i(z_guess, i_guess, œÑ)
            
            if istar[idx_œÑ]>self.i_r: 
                
                i_dstar[idx_œÑ] = self.i_d(istar[idx_œÑ])
 
            else:
                i_dstar[idx_œÑ] = istar[idx_œÑ]
 
            Œæstar[idx_œÑ] = self.Total_loan_func(istar[idx_œÑ], zstar[idx_œÑ], œÑ)
            
            Dstar[idx_œÑ] = self.Total_deposit_func(istar[idx_œÑ], zstar[idx_œÑ], œÑ)
            
            qstar[idx_œÑ] = self.Total_q_func(zstar[idx_œÑ], istar[idx_œÑ], œÑ)
            
            œÄ_firm_star[idx_œÑ] = self.firm_profit_func(zstar[idx_œÑ], istar[idx_œÑ], œÑ)
            
            DM_surplus[idx_œÑ] = self.DM_utility(zstar[idx_œÑ], istar[idx_œÑ], œÑ)
                
            w_star[idx_œÑ] = self.welfare_func(zstar[idx_œÑ], istar[idx_œÑ], œÑ)
            
            w_bcw[idx_œÑ] = self.welfare_bcw_func(œÑ)
            
            price_mean[idx_œÑ] = self.SME_stat_func(zstar[idx_œÑ], istar[idx_œÑ], œÑ)['price_mean']
            
            price_sd[idx_œÑ] = self.SME_stat_func(zstar[idx_œÑ], istar[idx_œÑ], œÑ)['price_sd']
            
            price_cv[idx_œÑ] = self.SME_stat_func(zstar[idx_œÑ], istar[idx_œÑ], œÑ)['price_cv']
            
            markup_mean[idx_œÑ] = self.SME_stat_func(zstar[idx_œÑ], istar[idx_œÑ], œÑ)['markup_mean']
            
            markup_sd[idx_œÑ] = self.SME_stat_func(zstar[idx_œÑ], istar[idx_œÑ], œÑ)['markup_sd']
            
            markup_cv[idx_œÑ] = self.SME_stat_func(zstar[idx_œÑ], istar[idx_œÑ], œÑ)['markup_cv']
       
            mpy_star[idx_œÑ] = self.SME_stat_func(zstar[idx_œÑ], istar[idx_œÑ], œÑ)['mpy']
            
            credit_gdp[idx_œÑ] = self.SME_stat_func(zstar[idx_œÑ], istar[idx_œÑ], œÑ)['loan_gdp']
            
            credit_gdp_bcw[idx_œÑ] = self.loan_gdp_bcw_func(œÑ)
            
            FFR[idx_œÑ] = self.i_policy(œÑ)
            
        allocation_grid = {'zstar': zstar,
                           'istar': istar,
                           'i_dstar': i_dstar, 
                           'Œæstar': Œæstar,
                           'Dstar': Dstar,
                           'qstar': qstar,
                           'œÄ_firm_star': œÄ_firm_star,
                           'DM_surplus': DM_surplus,
                           'w_star': w_star,
                           'w_bcw': w_bcw
                          }
        
        stat_grid = {'price_mean': price_mean,
                     'price_sd': price_sd,
                     'price_cv': price_cv,
                     'markup_mean': markup_mean,
                     'markup_sd': markup_sd,
                     'markup_cv': markup_cv,                   
                     'mpy_star': mpy_star,
                     'FFR': FFR,
                     'credit_gdp': credit_gdp,
                     'credit_gdp_bcw': credit_gdp_bcw                     
                    }
        
        result = {'allocation_grid': allocation_grid,
                  'stat_grid': stat_grid
                 }
        
        toc = time.time() - tic
        print("Elapsed time of solving SME:", toc, "seconds")
        
        return result  

    def SME_stat_ir(self, z_guess, i_guess, œÑ, i_r_min=0.0, i_r_max=0.1, i_r_grid_size=50):
        tic = time.time()
    
        i_r_grid = np.linspace(i_r_min, i_r_max, i_r_grid_size)
        
        zstar = np.zeros(i_r_grid.size)
        istar = np.zeros(i_r_grid.size)
        i_dstar = np.zeros(i_r_grid.size)
        i_binding = np.zeros(i_r_grid.size, dtype=bool)  
    
        Œæstar = np.zeros(i_r_grid.size)   
        Dstar = np.zeros(i_r_grid.size)    
        reserve = np.zeros(i_r_grid.size)  
        excess_reserve = np.zeros(i_r_grid.size)  
    
        qstar = np.zeros(i_r_grid.size)    
        œÄ_firm_star = np.zeros(i_r_grid.size)  
        w_star = np.zeros(i_r_grid.size)  
    
        original_i_r = self.i_r
    
        for idx, i_r in enumerate(i_r_grid):
            
            self.i_r = i_r
        
            zstar[idx], istar[idx] = self.solve_z_i(z_guess, i_guess, œÑ)
        
            i_binding[idx] = (i_r < istar[idx])  
            
            
            if self.i_d(istar[idx])>self.i_r: 
                
                i_dstar[idx] = self.i_d(istar[idx])
 
            else:
                i_dstar[idx] = istar[idx]
            
        
            Œæstar[idx] = self.Total_loan_func(istar[idx], zstar[idx], œÑ)
            Dstar[idx] = self.Total_deposit_func(istar[idx], zstar[idx], œÑ)
            reserve[idx] = self.chi * Dstar[idx]
            excess_reserve[idx] = Dstar[idx] - Œæstar[idx] - reserve[idx]
        
            qstar[idx] = self.Total_q_func(zstar[idx], istar[idx], œÑ)
            œÄ_firm_star[idx] = self.firm_profit_func(zstar[idx], istar[idx], œÑ)
            w_star[idx] = self.welfare_func(zstar[idx], istar[idx], œÑ)
            
        # Restore original i_r value
        self.i_r = original_i_r
            
        # Store results
        allocation_grid = {
            'i_r_grid': i_r_grid,
            'i_binding': i_binding,
            'zstar': zstar,
            'istar': istar,
            'i_dstar': i_dstar,
            'Œæstar': Œæstar,
            'Dstar': Dstar,
            'reserve': reserve,
            'excess_reserve': excess_reserve,
            'qstar': qstar,
            'œÄ_firm_star': œÄ_firm_star,
            'w_star': w_star
        }
    
        toc = time.time() - tic
        print("Elapsed time of solving SME:", toc, "seconds")
    
        return allocation_grid
